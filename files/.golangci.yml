---
version: "2"
run:
  go: "1.24"
  # If set, we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the
  # implicit automatic updating of go.mod described above. Instead, it
  # fails when any changes to go.mod are needed. This setting is most
  # useful to check that go.mod does not need updates, such as in a
  # continuous integration and testing system.
  #
  # Allowed values: readonly|vendor|mod
  # Default: ""
  modules-download-mode: readonly
linters:
  enable:
    # Prevents against memory leaks in production caused by not closing
    # file handle
    - bodyclose
    # Detects cloned code. DRY is good programming practice. Can cause issues
    # with testing code where simplicity is preferred over duplication.
    # Disabled for test code.
    - dupl
    - goconst
    # Misc linters missing from other projects. Grouped into 3 categories
    # diagnostics, style and performance
    - gocritic
    # Limits code cyclomatic complexity
    - gocyclo
    # Detect security issues with gocode. Use of secrets in code or obsolete
    # security algorithms. It's imaged heuristic methods are used in finding
    # problems. If issues with rules are found particular rules can be disabled
    # as required. Could possibility cause issues with testing.
    # Disabled for test code.
    - gosec
    # Detect commonly misspelled english words in comments
    - misspell
    # Detect naked returns on non-trivial functions, and conform with
    # Go CodeReviewComments
    - nakedret
    # Detect slice allocations that can be preallocated
    - prealloc
    # Detects style mistakes not correctness. Golint is meant to carry out the
    # stylistic conventions put forth in Effective Go and CodeReviewComments.
    # golint has false positives and false negatives and can be tweaked.
    - revive
    # Remove unnecessary type conversions
    - unconvert
    # Remove unnecessary(unused) function parameters
    - unparam
  settings:
    # Detects unchecked errors in go programs. These unchecked errors can be
    # critical bugs in some cases.
    errcheck:
      exclude-functions:
        - fmt.Fprint
        - fmt.Fprintf
    # Detect repeated strings that could be replaced by a constant
    goconst:
      # minimal length of string constant
      # default: 3
      min-len: 2
    gosec:
      excludes:
        - G201  # Allow formatted string for queries
    revive:
      enable-all-rules: true
      rules:
        # handled by goconst
        - name: add-constant
          disabled: true
        # cant limit this arbitrarily
        - name: argument-limit
          disabled: true
        # handled by gocyclo
        - name: cognitive-complexity
          disabled: true
        # false positive for Exported vs non-exported functions of the same name
        - name: confusing-naming
          disabled: true
        # false positives for "" - which is the nil value of a string (also 0)
        - name: confusing-results
          disabled: true
        # handled by gocyclo
        - name: cyclomatic
          disabled: true
        # some cli programs want to exit on error
        - name: deep-exit
          disabled: true
        # have comments on exported functions but not on vars/types/constants
        - name: exported
          arguments:
            - disableChecksOnConstants
            - disableChecksOnTypes
            - disableChecksOnVariables
        # false positives on bool params
        - name: flag-parameter
          disabled: true
        # extreme verticalization can happen
        - name: function-length
          disabled: true
        # return as many as you like
        - name: function-result-limit
          disabled: true
        # can false positive for non-getters
        - name: get-return
          disabled: true
        # only allows lowercase names
        - name: import-alias-naming
          disabled: true
        # handled by lll
        - name: line-length-limit
          disabled: true
        # handled by gocyclo
        - name: max-control-nesting
          disabled: true
        # don't want to arbitrarily limit this
        # many places have specific model.go files to contain all structs
        - name: max-public-structs
          disabled: true
        # disable package-comments
        - name: package-comments
          disabled: true
        # allow ignoring assertion result
        - name: unchecked-type-assertion
          arguments:
            - acceptIgnoredAssertionResult: true
        # this is handled by errcheck
        - name: unhandled-error
          disabled: true
  exclusions:
    generated: lax
    rules:
      - linters:
          # Table test encourage duplication in defining the table tests.
          - dupl
          # Error checking adds verbosity and complexity for minimal value
          - errcheck
          # Tests should be simple? Add example why this is good?
          - gocyclo
          # Hard coded example tokens, SQL injection and other bad practices may
          # want to be tested
          - gosec
          # Test data can long
          - lll
        path: _test\.go
    paths:
      - third_party$
      - builtin$
      - examples$
formatters:
  enable:
    # Controls Go package import order and makes it always deterministic.
    - gci
    # Detects if code needs to be gofmt'd
    - gofmt
  settings:
    gci:
      sections:
        - standard            # Standard section: captures all standard packages
        - localmodule         # Local module section contains all local packages
        - prefix(gerrit.lan)  # Prefixed gerrit.lan packages (jumgo)
        - default             # Everything else (github.com, golang.org, etc)
        - blank               # Blank section: contains all blank imports
      custom-order: true
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$
